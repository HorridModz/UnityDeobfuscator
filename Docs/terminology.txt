whether object is inherited ("class a: b" vs "class a") = is inherited (CURRENT NAME IS "is shared" MUST CHANGE)

base object in inherited object = base object (if none, it is set to None)

type of object ("struct", "class", "interface", "enum") = object type (CURRENT NAME IS "user-defined type" MUST CHANGE)
Called "objecttype" instead of "type" because "type" is a keyword in python

"public" in "public class classname: baseclass" or "private" in "private enum enumname" = object data type (CURRENT NAME IS "object type" MUST CHANGE)

"classname" in "public class classname: baseclass" or "enumname" in "private enum enumname" = object name

how many methods / fields / properties are in object = object size

"readonly" / "public" / "abstract" / "const" / "bool" / "object int[]" / "char*" etc.
= primitive type (including complex types) (CURRENT NAME IS "type" MUST CHANGE)

"Dictionary" / "Vector3" / "Quaternion" etc. = unity type

"PhotonNetworkingMessage" / "Color" (any user-defined type not defined by Unity) = user-defined type

user-definedtype / unity type / primitive type (including complex types) = data type (CURRENT NAME IS "type" MUST CHANGE)

Content of // Methods = methodssection
Each method = method
Content of "/* GenericInstMethod :" = generics
Each generic = generic
Content of // Fields = fieldssection
Each field = field
Content of // Properties = propertiessection
Each property = property
Called "Property" instead of "property" because "property" is a keyword in python

"int i = 1" in "function(int i = 1)" or "int a" in "function(int a,bool b=true)" = parameter / param
"1" in "function(int i = 1)" = default argument (if none, it is set to None)
"int " in "function(int a,bool b=true)" = parameter data type / param data type
"a" in "function(int a,bool b=true)" = parameter name / param name

"1" in "TypeDefIndex: 1" = typedefindex

"UnityEngine" in "// Namespace: UnityEngine" = namespace

"[ComVisibleAttribute] // RVA: 0x1 Offset: 0x1 VA: 0x1"
or
[DebuggerBrowsableAttribute] // RVA: 0x1 Offset: 0x1 VA: 0x1"
etc. = attribute line

"[ComVisibleAttribute]" or "[DebuggerBrowsableAttribute]" = attribute

"// Namespace:
enum enumname // TypeDefIndex: 1
{
	// Fields
	public int field;
}"
or
"// Namespace:
interface interfacename // TypeDefIndex: 1
{
	// Fields
	public int field;
}"
or
"// Namespace:
struct structname // TypeDefIndex: 1
{
	// Fields
	public int field;
}"
or
"// Namespace:
class classname // TypeDefIndex: 1
{
	// Fields
	public int field;
}"
etc. = object
Called "Object" instead of "object" because "object" is a keyword in python
